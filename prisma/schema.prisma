// Merged Prisma Schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Models from the "base" schema
model Post {
  id        String   @id @default(uuid())
  title     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Models from your application schema

// Primary Tables
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                String           @id @default(cuid())
  walletAddress     String           @unique
  ENSName           String?          @unique
  username          String?          @unique
  displayName       String?
  associatedEmail   String?          @unique
  Xhandle           String?          @unique
  discordID         String?          @unique
  avatar            String?
  referrals         Referral[]
  tokens            Token[]
  userPoints        UserPoints?
  userMissions      UserMission[]
  userDailyReward   UserDailyReward?
  userProfile       UserProfile?
  sessions          Session[]
  accounts          Account[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Mission {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  completionBonus Int
  startAt         DateTime
  endAt           DateTime
  platform        String
  userMissions    UserMission[]
}

model DailyReward {
  day         Int    @id
  bonusAmount Int
}

// Secondary Tables
model Referral {
  id           Int    @id @default(autoincrement())
  userId       String @map("user_id")
  referralCode Int
  rewardAmount Int
  user         User   @relation(fields: [userId], references: [id])
}

model Token {
  tokenID         Int       @id
  traits          String[]
  image           String
  name            String
  ownerID         String    @map("owner_id")
  lastTransaction DateTime
  owner           User      @relation(fields: [ownerID], references: [id])
}

model UserPoints {
  userId      String @id @map("user_id")
  lastUpdated DateTime
  totalPoints Int
  level       Int    @default(0)
  user        User   @relation(fields: [userId], references: [id])
}

model UserMission {
  userId     String   @id @map("user_id")
  missionId  Int      @map("mission_id")
  startedAt  DateTime
  isComplete Boolean
  user       User     @relation(fields: [userId], references: [id])
  mission    Mission  @relation(fields: [missionId], references: [id])
}

model UserDailyReward {
  userId     String   @id @map("user_id")
  currentDay Int      @default(0)
  lastClaimed DateTime? 
  user       User     @relation(fields: [userId], references: [id])
}
model UserProfile {
  userId            String @id @map("user_id")
  nickname          String?
  bio               String?
  walletAddress     String @unique
  location          String?
  joinedDate        DateTime
  profile_image_url_https String?
  user              User   @relation(fields: [userId], references: [id])
}

// Security
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Leveling
model Level {
  level  Int @id
  points Int
}
